<svg xmlns="http://www.w3.org/2000/svg" xmlns:h="http://www.w3.org/1999/xhtml">
  <title>When SVGGeometryElement.getPointAtLength is called with an element that can not compute the total length, throw exception</title>
  <h:link rel="help" href="https://svgwg.org/svg2-draft/types.html#__svg__SVGGeometryElement__getPointAtLength"/>
  <h:script src="/resources/testharness.js"/>
  <h:script src="/resources/testharnessreport.js"/>
  <path id='pathElement1' style='display:none' d='M0,0L100,0L100,100' description='path with display: none'/>
  <path id='pathElement2' style='display:contents' d='M0,0L100,0L100,100' description='path with display: contents'/>
  <path id='pathElement3' style='display:none' description='path with display: none and an empty path'/>
  <path id='pathElement4' style='display:contents' description='path with display: content and an empty path'/>
  <rect id='rectElement1' style='display:none' x='0' y='0' width='50' height='50' description='rect with display: none'/>
  <rect id='rectElement2' style='display:contents' x='0' y='0' width='50' height='50' description='rect with display: contents'/>
  <rect id='rectElement3' style='display:none' description='rect with display: none and an empty path'/>
  <rect id='rectElement4' style='display:contents' description='rect with display: contents and an empty path'/>
  <circle id='circleElement1' style='display:none' cx='0' cy='0' r='50' description='circle with display: none'/>
  <circle id='circleElement2' style='display:contents' cx='0' cy='0' r='50' description='circle with display: contents'/>
  <circle id='circleElement3' style='display:none' description='circle with display: none and an empty path'/>
  <circle id='circleElement4' style='display:contents' description='circle with display: contents and an empty path'/>
  <polygon id='polygonElement1' style='display:none' points="0,0 50,0 50,50 0,50" description='polygon with display: none'/>
  <polygon id='polygonElement2' style='display:contents' points="0,0 50,0 50,50 0,50" description='polygon with display: contents'/>
  <polygon id='polygonElement3' style='display:none' description='polygon with display: none and an empty path'/>
  <polygon id='polygonElement4' style='display:contents' description='polygon with display: contents and an empty path'/>
  <polyline id='polylineElement1' style='display:none' points="0,0 50,0 50,50 0,50" description='polyline with display: none'/>
  <polyline id='polylineElement2' style='display:contents' points="0,0 50,0 50,50 0,50" description='polyline with display: contents'/>
  <polyline id='polylineElement3' style='display:none' description='polyline with display: none and an empty path'/>
  <polyline id='polylineElement4' style='display:contents' description='polyline with display: contents and an empty path'/>
  <ellipse id='ellipseElement1' style='display:none' cx='0' cy='0' rx='50' ry='50' description='ellipse with display: none'/>
  <ellipse id='ellipseElement2' style='display:contents' cx='0' cy='0' rx='50' ry='50' description='ellipse with display: contents'/>
  <ellipse id='ellipseElement3' style='display:none' description='ellipse with display: none and an empty path'/>
  <ellipse id='ellipseElement4' style='display:contents' description='ellipse with display: contents and an empty path'/>
  <script>
['pathElement1', 'pathElement2'].forEach(elementId => {
  test(function() {
    let element = document.getElementById(elementId);
    var point = element.getPointAtLength(50);
    assert_approx_equals(point.x, 50, 1e-5);
    assert_approx_equals(point.y, 0, 1e-5);
  }, document.title + ', ' +
     document.getElementById(elementId).getAttribute('description'));
});

['pathElement3', 'pathElement4'].forEach(elementId => {
  test(function() {
    let element = document.getElementById(elementId);
    assert_throws_dom("InvalidStateError", function() { element.getPointAtLength(300); });
  }, document.title + ', ' +
     document.getElementById(elementId).getAttribute('description'));
});

['rectElement1', 'rectElement2'].forEach(elementId => {
  test(function() {
    let element = document.getElementById(elementId);
    var point = element.getPointAtLength(50);
    assert_approx_equals(point.x, 50, 1e-5);
    assert_approx_equals(point.y, 0, 1e-5);
  }, document.title + ', ' +
     document.getElementById(elementId).getAttribute('description'));
});

['rectElement3', 'rectElement4'].forEach(elementId => {
  test(function() {
    let element = document.getElementById(elementId);
    assert_throws_dom("InvalidStateError", function() { element.getPointAtLength(300); });
  }, document.title + ', ' +
     document.getElementById(elementId).getAttribute('description'));
});

['circleElement1', 'circleElement2'].forEach(elementId => {
  test(function() {
    let element = document.getElementById(elementId);
    var point = element.getPointAtLength(0);
    assert_approx_equals(point.x, 50, 1e-5);
    assert_approx_equals(point.y, 0, 1e-5);
  }, document.title + ', ' +
     document.getElementById(elementId).getAttribute('description'));
});

['circleElement3', 'circleElement4'].forEach(elementId => {
  test(function() {
    let element = document.getElementById(elementId);
    assert_throws_dom("InvalidStateError", function() { element.getPointAtLength(300); });
  }, document.title + ', ' +
     document.getElementById(elementId).getAttribute('description'));
});

['polygonElement1', 'polygonElement2'].forEach(elementId => {
  test(function() {
    let element = document.getElementById(elementId);
    var point = element.getPointAtLength(50);
    assert_approx_equals(point.x, 50, 1e-5);
    assert_approx_equals(point.y, 0, 1e-5);
  }, document.title + ', ' +
     document.getElementById(elementId).getAttribute('description'));
});

['polygonElement3', 'polygonElement4'].forEach(elementId => {
  test(function() {
    let element = document.getElementById(elementId);
    assert_throws_dom("InvalidStateError", function() { element.getPointAtLength(300); });
  }, document.title + ', ' +
     document.getElementById(elementId).getAttribute('description'));
});

['polylineElement1', 'polylineElement2'].forEach(elementId => {
  test(function() {
    let element = document.getElementById(elementId);
    var point = element.getPointAtLength(50);
    assert_approx_equals(point.x, 50, 1e-5);
    assert_approx_equals(point.y, 0, 1e-5);
  }, document.title + ', ' +
     document.getElementById(elementId).getAttribute('description'));
});

['polylineElement3', 'polylineElement4'].forEach(elementId => {
  test(function() {
    let element = document.getElementById(elementId);
    assert_throws_dom("InvalidStateError", function() { element.getPointAtLength(300); });
  }, document.title + ', ' +
     document.getElementById(elementId).getAttribute('description'));
});

['ellipseElement1', 'ellipseElement2'].forEach(elementId => {
  test(function() {
    let element = document.getElementById(elementId);
    var point = element.getPointAtLength(0);
    assert_approx_equals(point.x, 50, 1e-5);
    assert_approx_equals(point.y, 0, 1e-5);
  }, document.title + ', ' +
     document.getElementById(elementId).getAttribute('description'));
});

['ellipseElement3', 'ellipseElement4'].forEach(elementId => {
  test(function() {
    let element = document.getElementById(elementId);
    assert_throws_dom("InvalidStateError", function() { element.getPointAtLength(300); });
  }, document.title + ', ' +
     document.getElementById(elementId).getAttribute('description'));
});
  </script>
</svg>
